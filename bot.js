/**
 * PontuXL Bot Interface
 * This file handles the communication between the web interface and the Prolog bot
 */

// DOM elements
const chatMessages = document.getElementById('chat-messages');
const userInput = document.getElementById('user-input');
const sendButton = document.getElementById('send-button');

// Sample responses for the bot (will be replaced with Prolog integration)
// Questions et r√©ponses du chatbot
const gameQuestions = [
    {
        keywords: ['hello', 'bonjour', 'salut', 'coucou', 'bonsoir', 'hey', 'hi', 'hola', 'yo', 'ola', 'slt'],
        response: "Bonjour ! Je suis PBot, le bot explicateur du jeu PontuXL. En quoi puis-je vous √™tre utile ?"
    },
    {
        keywords: ['commence', 'premier', 'debute', 'debut', 'debut partie', 'qui commence', 'qui commence le jeu'],
        response: "Par convention, c'est au joueur en charge des lutins verts de commencer la partie."
    },
    {
        keywords: ['combien', 'nombre', 'lutin', 'pion', 'lutins', 'pions', 'equipe', '√©quipe'],
        response: "Chaque √©quipe compte 4 lutins."
    },
    {
        keywords: ['gagner', 'victoire', 'gagne', 'but', 'but du jeu', 'comment gagner', 'fin partie', 'quand fin partie'],
        response: "La partie se termine lorsqu'il ne reste plus qu'un seul joueur dont les lutins ne sont pas tous isol√©s. Ce joueur est d√©clar√© vainqueur."
    },
    {
        keywords: ['jouer', 'joue', 'deroulement', 'tour', 'comment', 'comment jouer', 'coment', 'comman', 'commant', 'commente', 'deplacer', 'd√©placer'],
        response: "Pour d√©placer un lutin, vous devez le faire passer d'une case √† une autre en empruntant un pont. Deux lutins ne peuvent pas se trouver sur la m√™me case. Apr√®s avoir d√©plac√© un lutin, vous devez retirer un pont ou tourner un pont d'un quart de tour."
    },
    {
        keywords: ['r√®gle', 'r√®gles', 'principe', 'base'],
        response: "Pontu est un jeu o√π vous d√©placez vos lutins et retirez des ponts pour isoler les lutins adverses. Un joueur est √©limin√© quand tous ses lutins sont isol√©s."
    },
    {
        keywords: ['d√©placer', 'mouvement', 'bouger', 'd√©placement'],
        response: "Vous pouvez d√©placer un lutin vers une case adjacente en passant par un pont. Deux lutins ne peuvent pas occuper la m√™me case."
    },
    {
        keywords: ['retirer', 'enlever', 'supprimer', 'pont'],
        response: "Apr√®s avoir d√©plac√© un lutin, vous devez retirer un pont. Vous pouvez retirer le pont que vous venez d'emprunter ou n'importe quel autre pont."
    },
    {
        keywords: ['tourner', 'rotation', 'pivoter', 'orienter'],
        response: "Au lieu de retirer un pont, vous pouvez choisir de tourner un pont d'un quart de tour."
    },
    {
        keywords: ['taille', 'dimension', 'plateau', 'grille'],
        response: "Dans PontuXL, le plateau est de taille 6x6."
    },
    {
        keywords: ['ordre', 'tour', 'sequence', 'joueur'],
        response: "Les joueurs jouent dans l'ordre suivant : vert, bleu, jaune, rouge."
    },
    {
        keywords: ['ia', 'intelligence', 'artificielle', 'ordinateur', 'robot'],
        response: "Dans cette version du jeu, les lutins bleus et rouges sont contr√¥l√©s par une intelligence artificielle."
    },
    {
        keywords: ['isoler', '√©liminer', '√©limination'],
        response: "Un joueur est √©limin√© quand tous ses lutins sont isol√©s, c'est-√†-dire qu'ils n'ont plus aucun pont accessible autour d'eux."
    },
    {
        keywords: ['couleur', '√©quipe', 'camp'],
        response: "Il y a quatre √©quipes dans le jeu : verte, bleue, jaune et rouge. Les lutins verts et jaunes sont contr√¥l√©s par les joueurs humains."
    },
    {
        keywords: ['difficult√©', 'niveau', 'ia'],
        response: "L'intelligence artificielle utilise un algorithme sophistiqu√© (Max‚Åø) pour jouer de mani√®re strat√©gique, mais elle a un temps limit√© pour prendre ses d√©cisions."
    },
    {
        keywords: ['strat√©gie', 'conseil', 'astuce', 'tactique'],
        response: "Quelques conseils strat√©giques : gardez vos lutins group√©s, essayez d'isoler les lutins adverses un par un, et pensez √† plusieurs coups √† l'avance."
    }
];

// --- en haut du fichier (ou au tout d√©but de initBot)
if (window.__pbotInitialized) {
  // d√©j√† initialis√©, on ne refait rien
} else {
  window.__pbotInitialized = false; // flag pos√© mais pas encore pr√™t
}
// Initialize the bot
function initBot() {
    if (window.__pbotInitialized) return; // √©vite les doubles appels
    window.__pbotInitialized = true;

    // Get DOM elements
    const chatMessages = document.getElementById('chat-messages');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');

    if (!chatMessages || !userInput || !sendButton) {
        console.error('Chat elements not found!');
        return;
    }

    // Stocker dans un objet global
    window.chatElements = { chatMessages, userInput, sendButton };

    // Remplacer le bouton par un clone pour nettoyer les anciens listeners
    sendButton.replaceWith(sendButton.cloneNode(true));
    window.chatElements.sendButton = document.getElementById('send-button');

    // Ajout des event listeners
    window.chatElements.sendButton.addEventListener('click', handleUserMessage);
    userInput.addEventListener('keypress', (event) => {
        if (event.key === 'Enter') handleUserMessage();
    });

    // Ajout unique du message d‚Äôintro
    if (chatMessages.childElementCount === 0) {
        addMessage(
          "Bonjour ! Je suis le chatbot de Pontu. Je peux vous aider avec les r√®gles du jeu, comment jouer, et r√©pondre √† vos questions. Que voulez-vous savoir ?",
          'bot'
        );
        // Optionnel : deuxi√®me message
        // addMessage("Posez-moi une question pour commencer üëá", 'bot');
    }
}

// --- helpers 
function prologListToArray(term) {
  const arr = [];
  let t = term;
  while (t && t.indicator === "./2") {
    arr.push(t.args[0].toString());
    t = t.args[1];
  }
  return arr;
}

function formatTokensToText(tokens) {
  let s = tokens.join(' ');
  s = s.replace(/\s+([.,!?;:])/g, '$1')
       .replace(/\s*'\s*/g, "'")
       .replace(/\(\s+/g, '(').replace(/\s+\)/g, ')')
       .replace(/\s*-\s*/g, '-')
       .replace(/\s{2,}/g, ' ')
       .trim();
  if (s) s = s[0].toUpperCase() + s.slice(1);
  if (s && !/[.!?]$/.test(s)) s += '.';
  return s;
}


// Handle user message
async function handleUserMessage() {
  const { userInput, chatMessages } = window.chatElements || {};
  const message = (userInput?.value || '').trim();
  if (!message) return;

  addMessage(message, 'user');
  if (userInput) userInput.value = '';

    // --- Interception imm√©diate des salutations et de "fin" (avant Prolog) ---
  const raw = message.toLowerCase().trim();
  const normalized = raw
    .normalize('NFD').replace(/[\u0300-\u036f]/g, '')   // enl√®ve accents (bonjour, bonjour!, ol√° ‚Üí ola)
    .replace(/[^\p{L}\p{N}\s]/gu, ' ')                  // enl√®ve ponctuation
    .replace(/\s+/g, ' ')
    .trim();

  const tokens = normalized.split(' ').filter(Boolean);

  // Salutations : toujours r√©pondre (√† chaque fois), sans bloquer les suivantes
  const greetings = ['hello','bonjour','salut','coucou','bonsoir','hey','hi','hola','yo','ola','slt'];
  if (tokens.some(t => greetings.includes(t))) {
    addMessage("Bonjour ! Je suis PBot, le bot explicateur du jeu PontuXL. En quoi puis-je vous √™tre utile ?", 'bot');
    return; // on ne passe pas par Prolog ni fallback pour ce tour
  }

  // Mot-cl√© de sortie (filet de s√©curit√© si Prolog indispo)
  if (tokens.includes('fin')) {
    addMessage("Merci de m'avoir consult√©.", 'bot');
    return;
  }
  // --- Fin interception ---

  try {
    const lines = await getPrologResponse(message); // <- ne doit rien afficher

    if (Array.isArray(lines) && lines.length > 0) {
      lines.forEach(line => addMessage(line, 'bot'));
    } else {
      // fallback unique (pas un m√©lange)
      const fb = getBotResponse(message);
      addMessage(fb, 'bot');
    }
  } catch (e) {
    console.error('Error getting response:', e);
    const fb = getBotResponse(message);
    addMessage(fb, 'bot');
  }

  if (chatMessages) chatMessages.scrollTop = chatMessages.scrollHeight;
}


// Add a message to the chat
function addMessage(message, sender, opts = {}) {
  const { chatMessages } = window.chatElements || {};
  if (!chatMessages) return;

  const el = document.createElement('div');
  el.className = sender === 'user' ? 'user-message' : 'bot-message';
  el.textContent = message;

  // tag sp√©cial pour l‚Äôintro (utile pour le garde dans initBot)
  if (opts.intro) el.dataset.intro = "1";

  chatMessages.appendChild(el);
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Fonction pour calculer la distance de Levenshtein (similarit√© entre deux cha√Ænes)
function levenshteinDistance(str1, str2) {
    const m = str1.length;
    const n = str2.length;
    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));

    for (let i = 0; i <= m; i++) dp[i][0] = i;
    for (let j = 0; j <= n; j++) dp[0][j] = j;

    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (str1[i - 1] === str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = 1 + Math.min(
                    dp[i - 1][j],     // suppression
                    dp[i][j - 1],     // insertion
                    dp[i - 1][j - 1]   // remplacement
                );
            }
        }
    }
    return dp[m][n];
}

// Liste des salutations courtes qui doivent correspondre exactement
const shortGreetings = new Set(['hi', 'hey', 'yo', 'ola']);

// Fonction pour v√©rifier si deux mots sont similaires
function areSimilar(word1, word2, threshold = 0.5) {
    // Normaliser les mots
    word1 = word1.toLowerCase()
        .replace(/['']/g, "'")
        .replace(/[\u00e0\u00e2]/g, "a")
        .replace(/[\u00e8\u00e9\u00ea\u00eb]/g, "e")
        .replace(/[\u00ee\u00ef]/g, "i")
        .replace(/[\u00f4]/g, "o")
        .replace(/[\u00f9\u00fb]/g, "u")
        .replace(/[\u00e7]/g, "c")
        .trim();
    
    word2 = word2.toLowerCase()
        .replace(/['']/g, "'")
        .replace(/[\u00e0\u00e2]/g, "a")
        .replace(/[\u00e8\u00e9\u00ea\u00eb]/g, "e")
        .replace(/[\u00ee\u00ef]/g, "i")
        .replace(/[\u00f4]/g, "o")
        .replace(/[\u00f9\u00fb]/g, "u")
        .replace(/[\u00e7]/g, "c")
        .trim();

    // V√©rification sp√©ciale pour les salutations courtes
    if (shortGreetings.has(word1) || shortGreetings.has(word2)) {
        return word1 === word2;
    }

    // Si les mots sont identiques apr√®s normalisation
    if (word1 === word2) {
        return true;
    }

    // Si un mot contient l'autre
    if (word1.includes(word2) || word2.includes(word1)) {
        return true;
    }

    // Pour les mots tr√®s courts (2 caract√®res ou moins)
    if (word1.length <= 2 || word2.length <= 2) {
        return false;
    }
    
    const distance = levenshteinDistance(word1, word2);
    const maxLength = Math.max(word1.length, word2.length);
    const similarity = 1 - distance / maxLength;
    
    return similarity >= threshold;
}

// Get bot response based on user input
// Get bot response based on user input (scoring robuste + garde "combien/nombre")
function getBotResponse(message) {
  const raw = (message || "").trim().toLowerCase();
  if (raw === "fin") return "Merci de m'avoir consult√©.";

  // Normalisation (sans accents, sans ponctuation)
  const normalized = raw
    .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
    .replace(/[^a-z0-9\s]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();

  if (!normalized) {
    return "Je ne peux pas r√©pondre √† un message vide. Posez-moi une question sur le jeu !";
  }

  const tokens = normalized.split(' ');
  const tokenSet = new Set(tokens);

  // Mots cl√©s importants √† privil√©gier
  const CRITICAL = new Set(['retirer','pont','deplacer','tourner','gagner','commence','ordre','ia','couleur','regle','plateau']);

  // util: normaliser une cha√Æne pour comparaison
  const norm = s => (s || '')
    .toLowerCase()
    .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
    .replace(/\s+/g, ' ')
    .trim();

  let best = null;

  for (const q of gameQuestions) {
    let exact = 0, contains = 0, fuzzy = 0, criticalHits = 0;

    for (const kw of q.keywords) {
      const nkw = norm(kw);
      // exact token match
      if (tokenSet.has(nkw)) {
        exact++;
        if (CRITICAL.has(nkw)) criticalHits++;
        continue;
      }
      // sous-cha√Æne raisonnable (√©vite les mini-mots)
      const hitContain = tokens.some(t =>
        t.length >= 3 && nkw.length >= 3 && (t.includes(nkw) || nkw.includes(t))
      );
      if (hitContain) {
        contains++;
        if (CRITICAL.has(nkw)) criticalHits++;
        continue;
      }
      // fuzzy (Levenshtein)
      let bestSim = 0;
      for (const t of tokens) {
        const sim = 1 - (levenshteinDistance(t, nkw) / Math.max(t.length, nkw.length));
        if (sim > bestSim) bestSim = sim;
      }
      if (bestSim >= 0.82) {
        fuzzy++;
        if (CRITICAL.has(nkw)) criticalHits++;
      }
    }

    // Score global
    let score = 3*exact + 2*contains + 1*fuzzy + 1.5*criticalHits;

    // üîí Garde anti-faux-positif :
    // La r√©ponse "Chaque √©quipe compte 4 lutins." n'est autoris√©e
    // que si la question contient un quantificateur.
    const respNorm = norm(q.response);
    const isTeamCount = /chaque equipe compte 4 lutins/.test(respNorm);
    if (isTeamCount) {
      const hasQuantifier = tokenSet.has('combien') || tokenSet.has('nombre');
      if (!hasQuantifier) {
        score = -999; // bannie si pas "combien"/"nombre"
      }
    }

    if (!best || score > best.score || (score === best.score && exact > best.exact)) {
      best = { response: q.response, score, exact };
    }
  }

  if (!best || best.score <= 0) {
    return "Je ne suis pas s√ªr de comprendre votre question. Vous pouvez me demander des informations sur :\n" +
      "- Les r√®gles du jeu\n" +
      "- Comment jouer\n" +
      "- Les d√©placements des lutins\n" +
      "- La gestion des ponts\n" +
      "- Les conditions de victoire\n" +
      "- L'intelligence artificielle\n" +
      "- Les strat√©gies de jeu";
  }

  return best.response;
}


// Fonction pour consulter le bot Prolog
async function getPrologResponse(message) {
  try {
    const session = pl.create();

    // Charger la lib lists
    await new Promise((resolve, reject) => {
      session.consult(":- use_module(library(lists)).", { success: resolve, error: reject });
    });

    // Charger le fichier Prolog du bot
    const prologText = await fetch("pbot-elm.pl").then(r => r.text());
    await new Promise((resolve, reject) => {
      session.consult(prologText, { success: resolve, error: reject });
    });

    // Normaliser + tokeniser (sans accents)
    const words = message.toLowerCase()
      .replace(/['']/g, "'")
      .replace(/[\u00e0\u00e2]/g, "a")
      .replace(/[\u00e8\u00e9\u00ea\u00eb]/g, "e")
      .replace(/[\u00ee\u00ef]/g, "i")
      .replace(/[\u00f4]/g, "o")
      .replace(/[\u00f9\u00fb]/g, "u")
      .replace(/[\u00e7]/g, "c")
      .replace(/[^a-z0-9\s?]/g, ' ')
      .trim()
      .split(/\s+/)
      .filter(Boolean);

    const query = `produire_reponse([${words.join(',')}], Response)`;

    const ans = await new Promise((resolve, reject) => {
      session.query(query, {
        success: () => session.answer({
          success: resolve,
          fail: () => resolve(null),
          error: reject
        }),
        error: reject
      });
    });

    if (!ans || !ans.links || !ans.links.Response) {
      return null; // => d√©clenche le fallback
    }

    // Response est une liste Prolog
    const tokens = prologListToArray(ans.links.Response);

    // Si certaines r√®gles renvoient d√©j√† des phrases (espaces), on fait 1 bulle par √©l√©ment.
    const hasFull = tokens.some(t => /\s/.test(t));
    let lines = [];
    if (hasFull) {
      tokens.forEach(t => {
        const clean = formatTokensToText(t.split(/\s+/));
        if (clean) lines.push(clean);
      });
    } else {
      const clean = formatTokensToText(tokens);
      if (clean) lines.push(clean);
    }

    return lines.length ? lines : null; // pas d‚Äôaffichage ici
  } catch (e) {
    console.error('Erreur Prolog:', e);
    return null; // => fallback
  }
}


// Initialize the bot when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, initializing bot...');
    initBot();
});
